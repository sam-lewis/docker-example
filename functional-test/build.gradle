apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.5.2'
    }
}

dependencies {
    testCompile 'org.glassfish.jersey.core:jersey-client:2.9.1'
}

docker {
    url = 'https://192.168.99.101:2376'
    certPath = new File(System.properties['user.home'], '.docker/machine/certs')
}

task unzipAppDocker(type: Copy, dependsOn: ':app-docker:dist') {
    from zipTree('../app-docker/build/distributions/app-docker.zip')
    into "$buildDir/app-docker"
}

task buildMyAppImage(type: DockerBuildImage) {
    dependsOn unzipAppDocker
    inputDir = file("$buildDir/app-docker")
    tag = 'test/app-docker'
}

task createMyAppContainer(type: DockerCreateContainer) {
    dependsOn buildMyAppImage
    targetImageId { buildMyAppImage.getImageId() }
    portBindings = ['8080:8080']
}

task startMyAppContainer(type: DockerStartContainer) {
    dependsOn createMyAppContainer
    targetContainerId { createMyAppContainer.getContainerId() }
}

task stopMyAppContainer(type: DockerStopContainer) {
    targetContainerId { createMyAppContainer.getContainerId() }
}

task unzipMongoDocker(type: Copy, dependsOn: ':mongo-docker:dist') {
    from zipTree('../mongo-docker/build/distributions/mongo-docker.zip')
    into "$buildDir/mongo-docker"
}

task buildMongoImage(type: DockerBuildImage) {
    dependsOn unzipMongoDocker
    inputDir = file("$buildDir/mongo-docker")
    tag = 'test/mongo-docker'
}

task createMongoContainer(type: DockerCreateContainer) {
    dependsOn buildMongoImage
    targetImageId { buildMongoImage.getImageId() }
    portBindings = ['27017:27017']
}

task startMongoContainer(type: DockerStartContainer) {
    dependsOn createMongoContainer
    targetContainerId { createMongoContainer.getContainerId() }
}

task stopMongoContainer(type: DockerStopContainer) {
    targetContainerId { createMongoContainer.getContainerId() }
}

test.dependsOn([startMyAppContainer, startMongoContainer])
test.finalizedBy([stopMyAppContainer, stopMongoContainer])

task runApp << {
    println 'Docker Containers Started'
    System.console().readLine '\n\nPress enter to quit...'
    println 'Stopping Docker Containers'
}

runApp.dependsOn([startMyAppContainer, startMongoContainer])
runApp.finalizedBy([stopMyAppContainer, stopMongoContainer])






